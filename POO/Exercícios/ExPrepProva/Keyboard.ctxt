#BlueJ class context
comment0.params=
comment0.target=java.util.StringTokenizer\ getToken()
comment0.text=\n\ O\ m\u00C3\u00A9todo\ <tt>getToken</tt>\ l\u00C3\u00AA\ uma\ string\ do\ <tt>BufferedReader</tt>\ associado\ com\ \n\ a\ entrada\ padr\u00C3\u00A3o\ e\ retorna\ uma\ inst\u00C3\u00A2ncia\ de\ <tt>StringTokenizer</tt>\ contendo\ os\ \n\ <i>tokens</i>\ criados\ a\ partir\ da\ linha\ lida.\ O\ m\u00C3\u00A9todo\ \u00C3\u00A9\ declarado\ como\ \n\ <tt>private</tt>\ pois\ s\u00C3\u00B3\ dever\u00C3\u00A1\ ser\ chamado\ a\ partir\ de\ outros\ m\u00C3\u00A9todos\ da\ classe.\n\ @return\ uma\ inst\u00C3\u00A2ncia\ de\ <tt>StringTokenizer</tt>\ contendo\ os\ <i>tokens</i>\ \n\ \ \ \ \ \ \ \ \ obtidos\ da\ linha\ lida\n\ @exception\ IOException\ se\ um\ erro\ de\ entrada\ e\ sa\u00C3\u00ADda\ ocorrer.\n\ @exception\ NullPointerException\ se\ uma\ string\ vazia\ for\ lida\ e\ tentarmos\ construir\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ uma\ inst\u00C3\u00A2ncia\ de\ <tt>StringTokenizer</tt>\ com\ ela\n\ @see\ java.util.StringTokenizer\ <tt>StringTokenizer</tt>\n
comment1.params=
comment1.target=boolean\ readBoolean()
comment1.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readBoolean</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>boolean</tt>.\ \n\ Este\ m\u00C3\u00A9todo\ simplesmente\ chama\ o\ m\u00C3\u00A9todo\ <tt>readBoolean</tt>\ com\ argumentos,\ \n\ descrito\ abaixo,\ considerando\ o\ valor\ <i>default</i>\ como\ sendo\ <tt>true</tt>.\n\ @return\ o\ valor\ do\ tipo\ boolean\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ <tt>true</tt>)\n
comment10.params=defaultvalue
comment10.target=long\ readLong(long)
comment10.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readLong</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>long</tt>.\ Este\ \n\ m\u00C3\u00A9todo\ tenta\ pegar\ o\ pr\u00C3\u00B3ximo\ <i>token</i>\ a\ ser\ lido\ da\ entrada\ padr\u00C3\u00A3o\ e\ o\ \n\ passa\ como\ argumento\ para\ o\ m\u00C3\u00A9todo\ <tt>parseLong</tt>\ da\ classe\ <tt>Long</tt>,\n\ que\ tenta\ convert\u00C3\u00AA-lo.\ Se\ a\ leitura\ e\ convers\u00C3\u00A3o\ puderem\ ser\ feitas,\ um\ valor\ \n\ do\ tipo\ <tt>long</tt>\ \u00C3\u00A9\ retornado,\ caso\ contr\u00C3\u00A1rio\ o\ valor\ <i>default</i>\ \n\ (passado\ como\ argumento)\ \u00C3\u00A9\ retornado.\n\ @param\ defaultvalue\ o\ valor\ <i>default</i>\ caso\ n\u00C3\u00A3o\ seja\ poss\u00C3\u00ADvel\ ler\ e\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ decodificar\ um\ valor\ do\ tipo\ <tt>long</tt>\n\ @return\ o\ valor\ do\ tipo\ <tt>long</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ igual\ ao\ argumento\ passado\ para\ o\ m\u00C3\u00A9todo)\n
comment11.params=
comment11.target=float\ readFloat()
comment11.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readFloat</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>float</tt>.\ Este\ \n\ m\u00C3\u00A9todo\ simplesmente\ chama\ o\ m\u00C3\u00A9todo\ <tt>readFloat</tt>\ com\ argumentos,\ descrito\ \n\ abaixo,\ considerando\ o\ valor\ <i>default</i>\ como\ sendo\ <tt>0f</tt>.\n\ @return\ o\ valor\ do\ tipo\ <tt>float</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ <tt>0f</tt>)\n
comment12.params=defaultvalue
comment12.target=float\ readFloat(float)
comment12.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readFloat</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>float</tt>.\ Este\ \n\ m\u00C3\u00A9todo\ tenta\ pegar\ o\ pr\u00C3\u00B3ximo\ <i>token</i>\ a\ ser\ lido\ da\ entrada\ padr\u00C3\u00A3o\ e\ o\ \n\ analisa,\ verificando\ se\ aparentemente\ \u00C3\u00A9\ <tt>NaN</tt>\ ou\ infinito.\ Se\ n\u00C3\u00A3o\ for,\ \n\ passa\ o\ valor\ lido\ como\ argumento\ para\ o\ m\u00C3\u00A9todo\ <tt>parseFloat</tt>\ da\ classe\ \n\ <tt>Float</tt>,\ que\ tenta\ convert\u00C3\u00AA-lo.\ Se\ a\ leitura\ e\ convers\u00C3\u00A3o\ puderem\ ser\ \n\ feitas,\ um\ valor\ do\ tipo\ <tt>float</tt>\ \u00C3\u00A9\ retornado,\ caso\ contr\u00C3\u00A1rio\ o\ valor\n\ <i>default</i>\ (passado\ como\ argumento)\ \u00C3\u00A9\ retornado.\n\ @param\ defaultvalue\ o\ valor\ <i>default</i>\ caso\ n\u00C3\u00A3o\ seja\ poss\u00C3\u00ADvel\ ler\ e\ decodificar\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ um\ valor\ do\ tipo\ <tt>float</tt>\n\ @return\ o\ valor\ do\ tipo\ <tt>float</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ igual\ ao\ argumento\ passado\ para\ o\ m\u00C3\u00A9todo)\n
comment13.params=
comment13.target=double\ readDouble()
comment13.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readDouble</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>double</tt>.\ \n\ Este\ m\u00C3\u00A9todo\ simplesmente\ chama\ o\ m\u00C3\u00A9todo\ <tt>readDouble</tt>\ com\ argumentos,\ \n\ descrito\ abaixo,\ considerando\ o\ valor\ <i>default</i>\ como\ sendo\ <tt>0.0</tt>.\n\ @return\ o\ valor\ do\ tipo\ <tt>double</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ <tt>0.0</tt>)\n
comment14.params=defaultvalue
comment14.target=double\ readDouble(double)
comment14.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readDouble</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>double</tt>.\ Este\n\ m\u00C3\u00A9todo\ tenta\ pegar\ o\ pr\u00C3\u00B3ximo\ <i>token</i>\ a\ ser\ lido\ da\ entrada\ padr\u00C3\u00A3o,\ \n\ analisando\ o\ valor\ para\ ver\ se\ \u00C3\u00A9\ <tt>NaN</tt>\ ou\ infinito,\ e\ se\ n\u00C3\u00A3o\ for,\ usa\ o\ \n\ valor\ como\ argumento\ para\ o\ m\u00C3\u00A9todo\ <tt>parseDouble</tt>\ da\ classe\ <tt>Double</tt>,\n\ que\ tenta\ convert\u00C3\u00AA-lo.\ Se\ a\ leitura\ e\ convers\u00C3\u00A3o\ puderem\ ser\ feitas,\ um\ valor\ \n\ do\ tipo\ <tt>double</tt>\ \u00C3\u00A9\ retornado,\ caso\ contr\u00C3\u00A1rio\ o\ valor\ <i>default</i>\ \n\ (passado\ como\ argumento)\ \u00C3\u00A9\ retornado.\n\ @param\ defaultvalue\ o\ valor\ <i>default</i>\ caso\ n\u00C3\u00A3o\ seja\ poss\u00C3\u00ADvel\ ler\ e\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ decodificar\ um\ valor\ do\ tipo\ <tt>double</tt>\n\ @return\ o\ valor\ do\ tipo\ <tt>double</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ igual\ ao\ argumento\ passado\ para\ o\ m\u00C3\u00A9todo)\n
comment15.params=
comment15.target=char\ readChar()
comment15.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readChar</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>char</tt>.\ Este\n\ m\u00C3\u00A9todo\ simplesmente\ chama\ o\ m\u00C3\u00A9todo\ <tt>readChar</tt>\ com\ argumentos,\ descrito\n\ abaixo,\ considerando\ o\ valor\ <i>default</i>\ como\ sendo\ <tt>'\ '</tt>\ (espa\u00C3\u00A7o).\n\ @return\ o\ valor\ do\ tipo\ <tt>char</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ espa\u00C3\u00A7o)\n
comment16.params=defaultvalue
comment16.target=char\ readChar(char)
comment16.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readChar</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>char</tt>.\ Este\ \n\ m\u00C3\u00A9todo\ tenta\ pegar\ o\ pr\u00C3\u00B3ximo\ <i>token</i>\ a\ ser\ lido\ da\ entrada\ padr\u00C3\u00A3o\ e\ retorna\n\ o\ primeiro\ caractere\ deste\ <i>token</i>,\ ignorando\ os\ outros.\ Se\ a\ leitura\ puder\ ser\ \n\ feita,\ um\ valor\ do\ tipo\ <tt>char</tt>\ \u00C3\u00A9\ retornado,\ caso\ contr\u00C3\u00A1rio\ o\ valor\n\ <i>default</i>\ (passado\ como\ argumento)\ \u00C3\u00A9\ retornado.\n\ @param\ defaultvalue\ o\ valor\ <i>default</i>\ caso\ n\u00C3\u00A3o\ seja\ poss\u00C3\u00ADvel\ ler\ um\ valor\ do\ tipo\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <tt>char</tt>\n\ @return\ o\ valor\ do\ tipo\ <tt>char</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ igual\ ao\ \n\ \ \ \ \ \ \ \ \ argumento\ passado\ para\ o\ m\u00C3\u00A9todo)\n
comment17.params=
comment17.target=java.lang.String\ readString()
comment17.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readString</tt>\ l\u00C3\u00AA\ e\ retorna\ uma\ inst\u00C3\u00A2ncia\ da\ classe\ <tt>String</tt>.\n\ Este\ m\u00C3\u00A9todo\ simplesmente\ chama\ o\ m\u00C3\u00A9todo\ <tt>readString</tt>\ com\ argumentos,\ descrito\n\ abaixo,\ considerando\ o\ valor\ <i>default</i>\ como\ sendo\ <tt>""</tt>\ (string\ vazia).\n\ @return\ o\ valor\ da\ string\ lida\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ uma\ string\n\ \ \ \ \ \ \ \ \ vazia)\n
comment18.params=defaultvalue
comment18.target=java.lang.String\ readString(java.lang.String)
comment18.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readString</tt>\ l\u00C3\u00AA\ e\ retorna\ uma\ inst\u00C3\u00A2ncia\ da\ classe\ <tt>String</tt>.\ \n\ Este\ m\u00C3\u00A9todo\ retorna\ uma\ linha\ inteira\ lida\ da\ entrada\ padr\u00C3\u00A3o,\ sem\ process\u00C3\u00A1-la\ como\n\ <i>tokens</i>.\ Se\ a\ leitura\ puder\ ser\ feita,\ a\ string\ lida\ \u00C3\u00A9\ retornada,\ caso\ \n\ contr\u00C3\u00A1rio\ o\ valor\ <i>default</i>\ (passado\ como\ argumento)\ \u00C3\u00A9\ retornado.\ O\ valor\n\ <i>default</i>\ tamb\u00C3\u00A9m\ \u00C3\u00A9\ retornado\ no\ caso\ de\ uma\ string\ vazia.\ \n\ @param\ defaultvalue\ o\ valor\ <i>default</i>\ caso\ n\u00C3\u00A3o\ seja\ poss\u00C3\u00ADvel\ ler\ uma\ inst\u00C3\u00A2ncia\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ da\ classe\ <tt>String</tt>\n\ @return\ o\ valor\ da\ string\ lida\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ igual\ ao\ \n\ \ \ \ \ \ \ \ \ argumento\ passado\ para\ o\ m\u00C3\u00A9todo)\n
comment19.params=
comment19.target=void\ debugOn()
comment19.text=\n\ O\ m\u00C3\u00A9todo\ <tt>debugOn</tt>\ modifica\ o\ campo\ que\ indica\ que\ mensagens\ de\ erro\ \n\ dever\u00C3\u00A3o\ ser\ mostradas,\ fazendo\ com\ que\ sejam\ mostradas\ at\u00C3\u00A9\ que\ o\ m\u00C3\u00A9todo\ \n\ <tt>debugOff</tt>\ seja\ chamado.\n
comment2.params=defaultvalue
comment2.target=boolean\ readBoolean(boolean)
comment2.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readBoolean</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>boolean</tt>.\ Este\ \n\ m\u00C3\u00A9todo\ tenta\ pegar\ o\ pr\u00C3\u00B3ximo\ <i>token</i>\ a\ ser\ lido\ da\ entrada\ padr\u00C3\u00A3o\ e\ o\ compara\n\ \ com\ algumas\ strings\ constantes\ para\ verificar\ a\ igualdade,\ retornando\ <tt>true</tt>\ \n\ ou\ <tt>false</tt>\ dependendo\ do\ resultado\ da\ compara\u00C3\u00A7\u00C3\u00A3o.\n\ @param\ defaultvalue\ o\ valor\ <i>default</i>\ caso\ n\u00C3\u00A3o\ seja\ poss\u00C3\u00ADvel\ ler\ e\ decodificar\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ um\ valor\ booleano\n\ @return\ o\ valor\ do\ tipo\ <tt>boolean</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ igual\ ao\ \n\ \ \ \ \ \ \ \ \ argumento\ passado\ para\ o\ m\u00C3\u00A9todo)\n
comment20.params=
comment20.target=void\ debugOff()
comment20.text=\n\ O\ m\u00C3\u00A9todo\ <tt>debugOff</tt>\ modifica\ o\ campo\ que\ indica\ que\ mensagens\ de\ erro\ \n\ dever\u00C3\u00A3o\ ser\ mostradas,\ fazendo\ com\ que\ n\u00C3\u00A3o\ sejam\ mostradas\ at\u00C3\u00A9\ que\ o\ m\u00C3\u00A9todo\ \n\ <tt>debugOn</tt>\ seja\ chamado.\n
comment3.params=
comment3.target=byte\ readByte()
comment3.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readByte</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>byte</tt>.\ Este\ \n\ m\u00C3\u00A9todo\ simplesmente\ chama\ o\ m\u00C3\u00A9todo\ <tt>readByte</tt>\ com\ argumentos,\ descrito\ \n\ abaixo,\ considerando\ o\ valor\ <i>default</i>\ como\ sendo\ <tt>(byte)0</tt>.\n\ @return\ o\ valor\ do\ tipo\ <tt>byte</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ <tt>(byte)0</tt>)\n
comment4.params=defaultvalue
comment4.target=byte\ readByte(byte)
comment4.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readByte</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>byte</tt>.\ Este\ \n\ m\u00C3\u00A9todo\ tenta\ pegar\ o\ pr\u00C3\u00B3ximo\ <i>token</i>\ a\ ser\ lido\ da\ entrada\ padr\u00C3\u00A3o\ e\ o\ \n\ passa\ como\ argumento\ para\ o\ m\u00C3\u00A9todo\ <tt>parseByte</tt>\ da\ classe\ <tt>Byte</tt>,\ \n\ que\ tenta\ convert\u00C3\u00AA-lo.\ Se\ a\ leitura\ e\ convers\u00C3\u00A3o\ puderem\ ser\ feitas,\ um\ valor\n\ do\ tipo\ <tt>byte</tt>\ \u00C3\u00A9\ retornado,\ caso\ contr\u00C3\u00A1rio\ o\ valor\ <i>default</i>\ \n\ (passado\ como\ argumento)\ \u00C3\u00A9\ retornado.\n\ @param\ defaultvalue\ o\ valor\ <i>default</i>\ caso\ n\u00C3\u00A3o\ seja\ poss\u00C3\u00ADvel\ ler\ e\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ decodificar\ um\ valor\ do\ tipo\ <tt>byte</tt>\n\ @return\ o\ valor\ do\ tipo\ <tt>byte</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ igual\ ao\ argumento\ passado\ para\ o\ m\u00C3\u00A9todo)\n
comment5.params=
comment5.target=short\ readShort()
comment5.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readShort</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>short</tt>.\ \n\ Este\ m\u00C3\u00A9todo\ simplesmente\ chama\ o\ m\u00C3\u00A9todo\ <tt>readShort</tt>\ com\ argumentos,\ \n\ descrito\ abaixo,\ considerando\ o\ valor\ <i>default</i>\ como\ sendo\ <tt>(short)0</tt>.\n\ @return\ o\ valor\ do\ tipo\ <tt>short</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ <tt>(short)0</tt>)\n
comment6.params=defaultvalue
comment6.target=short\ readShort(short)
comment6.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readShort</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>short</tt>.\ Este\ \n\ m\u00C3\u00A9todo\ tenta\ pegar\ o\ pr\u00C3\u00B3ximo\ <i>token</i>\ a\ ser\ lido\ da\ entrada\ padr\u00C3\u00A3o\ e\ o\ passa\ \n\ como\ argumento\ para\ o\ m\u00C3\u00A9todo\ <tt>parseShort</tt>\ da\ classe\ <tt>Short</tt>,\ que\ \n\ tenta\ convert\u00C3\u00AA-lo.\ Se\ a\ leitura\ e\ convers\u00C3\u00A3o\ puderem\ ser\ feitas,\ um\ valor\ do\ tipo\ \n\ <tt>short</tt>\ \u00C3\u00A9\ retornado,\ caso\ contr\u00C3\u00A1rio\ o\ valor\ <i>default</i>\ (passado\ \n\ como\ argumento)\ \u00C3\u00A9\ retornado.\n\ @param\ defaultvalue\ o\ valor\ <i>default</i>\ caso\ n\u00C3\u00A3o\ seja\ poss\u00C3\u00ADvel\ ler\ e\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ decodificar\ um\ valor\ do\ tipo\ short\n\ @return\ o\ valor\ do\ tipo\ <tt>short</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ igual\ ao\ argumento\ passado\ para\ o\ m\u00C3\u00A9todo)\n
comment7.params=
comment7.target=int\ readInt()
comment7.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readInt</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>int</tt>.\ Este\n\ m\u00C3\u00A9todo\ simplesmente\ chama\ o\ m\u00C3\u00A9todo\ <tt>readInt</tt>\ com\ argumentos,\ descrito\ \n\ abaixo,\ considerando\ o\ valor\ <i>default</i>\ como\ sendo\ <tt>0</tt>.\n\ @return\ o\ valor\ do\ tipo\ <tt>int</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\n\ \ \ \ \ \ \ \ \ </tt>0</tt>)\n
comment8.params=defaultvalue
comment8.target=int\ readInt(int)
comment8.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readInt</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>int</tt>.\ Este\n\ m\u00C3\u00A9todo\ tenta\ pegar\ o\ pr\u00C3\u00B3ximo\ <i>token</i>\ a\ ser\ lido\ da\ entrada\ padr\u00C3\u00A3o\ e\ o\ \n\ passa\ como\ argumento\ para\ o\ m\u00C3\u00A9todo\ <tt>parseInt<tt>\ da\ classe\ <tt>Integer</tt>,\n\ que\ tenta\ convert\u00C3\u00AA-lo.\ Se\ a\ leitura\ e\ convers\u00C3\u00A3o\ puderem\ ser\ feitas,\ um\ valor\ \n\ do\ tipo\ <tt>int</tt>\ \u00C3\u00A9\ retornado,\ caso\ contr\u00C3\u00A1rio\ o\ valor\ <i>default</i>\ \n\ (passado\ como\ argumento)\ \u00C3\u00A9\ retornado.\n\ @param\ defaultvalue\ o\ valor\ <i>default</i>\ caso\ n\u00C3\u00A3o\ seja\ poss\u00C3\u00ADvel\ ler\ e\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ decodificar\ um\ valor\ do\ tipo\ <tt>int</tt>\n\ @return\ o\ valor\ do\ tipo\ <tt>int</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ igual\ ao\ argumento\ passado\ para\ o\ m\u00C3\u00A9todo)\n
comment9.params=
comment9.target=long\ readLong()
comment9.text=\n\ O\ m\u00C3\u00A9todo\ <tt>readLong</tt>\ l\u00C3\u00AA\ e\ retorna\ um\ valor\ do\ tipo\ <tt>long</tt>.\ Este\n\ m\u00C3\u00A9todo\ simplesmente\ chama\ o\ m\u00C3\u00A9todo\ <tt>readLong</tt>\ com\ argumentos,\ descrito\n\ abaixo,\ considerando\ o\ valor\ <i>default</i>\ como\ sendo\ <tt>0l</tt>.\n\ @return\ o\ valor\ do\ tipo\ <tt>long</tt>\ lido\ (ou,\ em\ caso\ de\ erro\ de\ leitura,\ \n\ \ \ \ \ \ \ \ \ <tt>0l</tt>)\n
numComments=21
